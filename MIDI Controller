#include <MIDI.h>
#include <midi_Defs.h>
#include <midi_Message.h>
#include <midi_Namespace.h>
#include <midi_Settings.h>

  MIDI_CREATE_INSTANCE(HardwareSerial, Serial, midiOut);

struct midi_mute_map_S {
  uint8_t button;
  uint8_t led;
  uint8_t audio_channel;  
};

#define MAP_ENTRIES 2

static midi_mute_map_S _midi_map[MAP_ENTRIES] = {
  /* button, led, audio_channel */
  {2, 4, 8},
  {3, 5, 6}
};

static uint8_t _button_states[MAP_ENTRIES] = {0};

void setup() {
  for (int i = 0; i < MAP_ENTRIES; i++) {
    pinMode(_midi_map[i].button, INPUT);  
    pinMode(_midi_map[i].led, OUTPUT);
    Serial.begin(31250);  
  }


}

void loop() {
  while (1) {
    for (int i = 0; i < MAP_ENTRIES; i++) {
      uint8_t button_state = digitalRead(_midi_map[i].button);

      // skip to next if button state is not changes
      if (_button_states[i] == button_state)
        continue;

      _button_states[i] = button_state;

      delay(250);
      
      // skip to next if button is not pressed
      if (button_state == LOW)
        continue;

      // At this point, we have a button press and we should
      // mute / unmute audio channel
      uint8_t led_state = digitalRead(_midi_map[i].led);
      if (led_state == LOW) {

        delay(250);
        
        // unmute audio channel
        digitalWrite(_midi_map[i].led, HIGH);
        midiOut.sendControlChange(_midi_map[i].audio_channel, 127, 2);
        
      } else {

        // mute audio channel
        digitalWrite(_midi_map[i].led, LOW);
        midiOut.sendControlChange(_midi_map[i].audio_channel, 0, 2);  
        
        
      }
    }
  }
}
